ROM Bank #0 (HOME):
  SECTION: $0000-$0000 ($0001 bytes)
  SECTION: $0008-$0008 ($0001 bytes)
  SECTION: $0010-$0010 ($0001 bytes)
  SECTION: $0018-$0018 ($0001 bytes)
  SECTION: $0020-$0020 ($0001 bytes)
  SECTION: $0028-$0028 ($0001 bytes)
  SECTION: $0030-$0030 ($0001 bytes)
  SECTION: $0038-$003A ($0003 bytes)
  SECTION: $0040-$0083 ($0044 bytes)
           $0077 = irq_Common.goto_irq_handler
           $0078 = wait_vbl
  SECTION: $0100-$014F ($0050 bytes)
  SECTION: $0150-$01F5 ($00A6 bytes)
           $01AF = Reset
           $0150 = StartPoint
           $01CD = irq_set_JOY
           $01D4 = CPU_fast
           $01BE = irq_set_LCD
           $01DB = CPU_slow
           $01B9 = irq_set_VBL
           $01C3 = irq_set_TIM
           $01C8 = irq_set_SIO
  SECTION: $3E00-$3EFF ($0100 bytes)
  SECTION: $3F00-$3FFF ($0100 bytes)
  SECTION: $3D00-$3DFF ($0100 bytes)
           $3D00 = _Random
  SECTION: $0084-$0097 ($0014 bytes)
           $0084 = GetRandom
           $0094 = SetRandomSeed
  SECTION: $01F6-$0316 ($0121 bytes)
           $01F6 = output_value
           $023A = Main.loop
           $021E = Main
  SECTION: $0098-$00C0 ($0029 bytes)
           $00B5 = memcopy_inc
           $00AC = memcopy
           $0098 = memset
           $00A0 = memset_rand
  SECTION: $0317-$035C ($0046 bytes)
           $0329 = div_u8u8u8
           $0317 = mul_u8u8u16
           $033C = div_s8s8s8
  SECTION: $00C1-$00F6 ($0036 bytes)
           $00C1 = scan_keys
  SECTION: $035D-$03AF ($0053 bytes)
           $037F = rom_bank_set
           $038F = rom_bank_push_set
           $03AF = ___long_call._jump_to_function
           $0367 = rom_bank_pop
           $035D = rom_handler_init
           $03A3 = ___long_call
           $037A = rom_bank_push
  SECTION: $03B0-$040C ($005D bytes)
           $03B0 = wait_ly
           $03D4 = vram_copy
           $03B7 = wait_frames
           $03F1 = vram_copy_tiles
           $03E3 = vram_memset
           $03BE = screen_off
           $03CD = wait_screen_blank
  SECTION: $040D-$0468 ($005C bytes)
           $040D = sprite_get_base_pointer
           $0461 = __refresh_OAM_end
           $0459 = __refresh_OAM
           $0424 = sprite_set_params
           $0466 = refresh_custom_OAM
           $042C = spr_set_palette
           $041D = sprite_set_tile
           $044C = init_OAM
           $0416 = sprite_set_xy
           $0461 = refresh_OAM
  SECTION: $0469-$04A0 ($0038 bytes)
           $0489 = bg_set_tile_wrap
           $0469 = bg_set_palette
           $0493 = bg_set_tile
    SLACK: $389E bytes

WRAM Bank #0:
  SECTION: $C0A0-$C0AC ($000D bytes)
           $C0A2 = _is_vbl_flag
           $C0A5 = LCD_handler
           $C0A7 = TIM_handler
           $C0A9 = SIO_handler
           $C0AB = JOY_handler
           $C0A3 = VBL_handler
           $C0A0 = Init_Reg_A
           $C0A1 = Init_Reg_B
  SECTION: $CE00-$CFFF ($0200 bytes)
           $D000 = StackTop
  SECTION: $C0AD-$C0AD ($0001 bytes)
           $C0AD = random_ptr
  SECTION: $C0AE-$C0AF ($0002 bytes)
           $C0AE = ram_ptr
  SECTION: $C0B0-$C0D0 ($0021 bytes)
           $C0D0 = rom_position
           $C0B0 = rom_stack
  SECTION: $C000-$C09F ($00A0 bytes)
           $C000 = OAM_Copy
    SLACK: $0D2F bytes

WRAM Bank #1:
  EMPTY

WRAM Bank #2:
  EMPTY

WRAM Bank #3:
  EMPTY

WRAM Bank #4:
  EMPTY

WRAM Bank #5:
  EMPTY

WRAM Bank #6:
  EMPTY

WRAM Bank #7:
  EMPTY

VRAM Bank #0:
  EMPTY

VRAM Bank #1:
  EMPTY

HRAM:
  SECTION: $FF88-$FF8A ($0003 bytes)
           $FF89 = joy_held
           $FF88 = _joy_old
           $FF8A = joy_pressed
  SECTION: $FF80-$FF87 ($0008 bytes)
           $FF80 = refresh_OAM_HRAM
    SLACK: $0074 bytes

SRAM Bank #0:
  EMPTY

SRAM Bank #1:
  EMPTY

SRAM Bank #2:
  EMPTY

SRAM Bank #3:
  EMPTY

